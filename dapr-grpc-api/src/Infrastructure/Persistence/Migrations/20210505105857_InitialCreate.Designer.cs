// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SC.API.CleanArchitecture.Infrastructure.Persistence;

namespace SC.API.CleanArchitecture.Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20210505105857_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.5")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("SC.API.CleanArchitecture.Domain.Entities.ApplicationRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("NormalizedName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ApplicationRoles");
                });

            modelBuilder.Entity("SC.API.CleanArchitecture.Domain.Entities.ApplicationRoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("ApplicationRoleClaims");
                });

            modelBuilder.Entity("SC.API.CleanArchitecture.Domain.Entities.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<int>("PartyId")
                        .HasColumnType("integer");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.HasIndex("PartyId");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("SC.API.CleanArchitecture.Domain.Entities.ApplicationUserRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("ApplicationUserRole");
                });

            modelBuilder.Entity("SC.API.CleanArchitecture.Domain.Entities.Audit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTimeOffset>("DateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("KeyValues")
                        .HasColumnType("text");

                    b.Property<string>("NewValues")
                        .HasColumnType("text");

                    b.Property<string>("OldValues")
                        .HasColumnType("text");

                    b.Property<string>("RecordedByParty")
                        .HasColumnType("text");

                    b.Property<string>("TableName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Audits");
                });

            modelBuilder.Entity("SC.API.CleanArchitecture.Domain.Entities.Catalog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsAlphabeticalSorting")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsUserDefinedSorting")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("ParentCatalogId")
                        .HasColumnType("uuid");

                    b.Property<string>("SystemName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("UserFriendlyName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.HasIndex("ParentCatalogId");

                    b.ToTable("Catalogs");

                    b.HasData(
                        new
                        {
                            Id = new Guid("878853a7-f4d9-474d-8515-766ba0ee2dd9"),
                            IsAlphabeticalSorting = false,
                            IsDeleted = false,
                            IsUserDefinedSorting = false,
                            SystemName = "CatCurrencies",
                            UserFriendlyName = "Currencies"
                        });
                });

            modelBuilder.Entity("SC.API.CleanArchitecture.Domain.Entities.CatalogItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CatalogId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Metadata")
                        .HasColumnType("text");

                    b.Property<Guid?>("ParentCatalogItemId")
                        .HasColumnType("uuid");

                    b.Property<int?>("RecordedByPartyId")
                        .HasColumnType("integer");

                    b.Property<int>("SortIndex")
                        .HasColumnType("integer");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.HasIndex("CatalogId");

                    b.HasIndex("ParentCatalogItemId");

                    b.HasIndex("RecordedByPartyId");

                    b.HasIndex("Value");

                    b.ToTable("CatalogItems");

                    b.HasData(
                        new
                        {
                            Id = new Guid("cae68d51-0477-4a83-b22a-32b6f7b8733c"),
                            CatalogId = new Guid("878853a7-f4d9-474d-8515-766ba0ee2dd9"),
                            IsDeleted = false,
                            SortIndex = 1,
                            Value = "EUR"
                        },
                        new
                        {
                            Id = new Guid("6667ebb9-7be5-4ce8-8f85-89f23fb31ed6"),
                            CatalogId = new Guid("878853a7-f4d9-474d-8515-766ba0ee2dd9"),
                            IsDeleted = false,
                            SortIndex = 2,
                            Value = "HRK"
                        },
                        new
                        {
                            Id = new Guid("6d56f3c9-a43b-4260-9f02-43d8db2d8223"),
                            CatalogId = new Guid("878853a7-f4d9-474d-8515-766ba0ee2dd9"),
                            IsDeleted = false,
                            SortIndex = 3,
                            Value = "USD"
                        });
                });

            modelBuilder.Entity("SC.API.CleanArchitecture.Domain.Entities.ContactMedium", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("ID")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("ContactMediumClassId")
                        .HasColumnType("integer")
                        .HasColumnName("ContactMediumClassID");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("character varying(2048)");

                    b.HasKey("Id");

                    b.HasIndex("ContactMediumClassId");

                    b.ToTable("ContactMedium");
                });

            modelBuilder.Entity("SC.API.CleanArchitecture.Domain.Entities.ContactMediumClass", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("ID");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.ToTable("ContactMediumClass");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Email"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Telephone"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Mobile"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Fax"
                        },
                        new
                        {
                            Id = 5,
                            Name = "InternalTelephone"
                        });
                });

            modelBuilder.Entity("SC.API.CleanArchitecture.Domain.Entities.Document", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("ID")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<byte[]>("Binary")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasMaxLength(510)
                        .HasColumnType("character varying(510)");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("DocumentDefinitionId")
                        .HasColumnType("integer")
                        .HasColumnName("DocumentDefinitionID");

                    b.Property<string>("DocumentExtensionExtension")
                        .HasColumnType("character varying(25)");

                    b.Property<int?>("DocumentTemplateId")
                        .HasColumnType("integer")
                        .HasColumnName("DocumentTemplateID");

                    b.Property<string>("Extension")
                        .IsRequired()
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("character varying(25)");

                    b.Property<Guid?>("ExternalId")
                        .HasColumnType("uuid")
                        .HasColumnName("ExternalID");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<bool>("IsSynced")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<Guid>("RecordId")
                        .HasColumnType("uuid")
                        .HasColumnName("RecordID");

                    b.Property<DateTime>("RecordedTimeStamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Tags")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("DocumentExtensionExtension");

                    b.HasIndex("DocumentTemplateId");

                    b.HasIndex("Extension");

                    b.ToTable("Document");
                });

            modelBuilder.Entity("SC.API.CleanArchitecture.Domain.Entities.DocumentExtension", b =>
                {
                    b.Property<string>("Extension")
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("character varying(25)");

                    b.Property<string>("CommonName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.HasKey("Extension");

                    b.ToTable("DocumentExtension");

                    b.HasData(
                        new
                        {
                            Extension = ".7z"
                        },
                        new
                        {
                            Extension = ".doc"
                        },
                        new
                        {
                            Extension = ".docx"
                        },
                        new
                        {
                            Extension = ".jpeg"
                        },
                        new
                        {
                            Extension = ".jpg"
                        },
                        new
                        {
                            Extension = ".pdf"
                        },
                        new
                        {
                            Extension = ".pjp"
                        },
                        new
                        {
                            Extension = ".pjpeg"
                        },
                        new
                        {
                            Extension = ".png"
                        },
                        new
                        {
                            Extension = ".rar"
                        },
                        new
                        {
                            Extension = ".svg"
                        },
                        new
                        {
                            Extension = ".xls"
                        },
                        new
                        {
                            Extension = ".xlsx"
                        },
                        new
                        {
                            Extension = ".zip"
                        });
                });

            modelBuilder.Entity("SC.API.CleanArchitecture.Domain.Entities.DocumentTemplate", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("ID");

                    b.Property<byte[]>("Binary")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("DocumentExtensionExtension")
                        .HasColumnType("character varying(25)");

                    b.Property<string>("Extension")
                        .IsRequired()
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("character varying(25)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.HasIndex("DocumentExtensionExtension");

                    b.HasIndex("Extension");

                    b.ToTable("DocumentTemplate");
                });

            modelBuilder.Entity("SC.API.CleanArchitecture.Domain.Entities.Entity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("ID")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("EntitySpecificationId")
                        .HasColumnType("integer")
                        .HasColumnName("EntitySpecificationID");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("LifeCycleChangeByPartyId")
                        .HasColumnType("integer")
                        .HasColumnName("LifeCycleChangeByPartyID");

                    b.Property<DateTime>("LifeCycleChangeTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("LifeCycleId")
                        .HasColumnType("integer")
                        .HasColumnName("LifeCycleID");

                    b.Property<int?>("ModifiedByPartyId")
                        .HasColumnType("integer")
                        .HasColumnName("ModifiedByPartyID");

                    b.Property<DateTime?>("ModifiedTimeStamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<Guid>("RecordId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValue(new Guid("d74f7cd6-d1e9-4a1b-b6cf-a67bc02f05af"))
                        .HasColumnName("RecordID");

                    b.Property<int>("RecordedByPartyId")
                        .HasColumnType("integer")
                        .HasColumnName("RecordedByPartyID");

                    b.Property<DateTime>("RecordedTimeStamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id");

                    b.HasIndex("EntitySpecificationId");

                    b.HasIndex("LifeCycleChangeByPartyId");

                    b.HasIndex("LifeCycleId");

                    b.HasIndex("ModifiedByPartyId");

                    b.HasIndex("RecordedByPartyId");

                    b.HasIndex("Id", "EntitySpecificationId")
                        .IsUnique();

                    b.HasIndex("Id", "LifeCycleId", "IsDeleted");

                    b.ToTable("Entity");
                });

            modelBuilder.Entity("SC.API.CleanArchitecture.Domain.Entities.EntityDocument", b =>
                {
                    b.Property<long>("DocumentId")
                        .HasColumnType("bigint")
                        .HasColumnName("DocumentID");

                    b.Property<long>("EntityId")
                        .HasColumnType("bigint")
                        .HasColumnName("EntityID");

                    b.HasKey("DocumentId", "EntityId")
                        .HasName("PK_dbo.EntityDocument");

                    b.HasIndex("DocumentId");

                    b.HasIndex("EntityId");

                    b.ToTable("EntityDocument");
                });

            modelBuilder.Entity("SC.API.CleanArchitecture.Domain.Entities.EntityInvolvementRole", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("ID");

                    b.Property<long>("EntityId")
                        .HasColumnType("bigint")
                        .HasColumnName("EntityID");

                    b.HasKey("Id");

                    b.HasIndex("EntityId");

                    b.HasIndex("Id");

                    b.ToTable("EntityInvolvementRole");
                });

            modelBuilder.Entity("SC.API.CleanArchitecture.Domain.Entities.EntityLifeCycleHistoryLog", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("ID")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("CurrentLifeCycleId")
                        .HasColumnType("integer")
                        .HasColumnName("CurrentLifeCycleID");

                    b.Property<long>("EntityId")
                        .HasColumnType("bigint")
                        .HasColumnName("EntityID");

                    b.Property<long?>("EntityInvolvementRoleId")
                        .HasColumnType("bigint")
                        .HasColumnName("EntityInvolvementRoleID");

                    b.Property<int>("PreviousLifeCycleId")
                        .HasColumnType("integer")
                        .HasColumnName("PreviousLifeCycleID");

                    b.Property<int>("TransationId")
                        .HasColumnType("integer")
                        .HasColumnName("TransationID");

                    b.Property<DateTime>("TransitionTimeStamp")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("EntityId");

                    b.HasIndex("EntityId", "TransationId");

                    b.HasIndex("PreviousLifeCycleId", "CurrentLifeCycleId");

                    b.HasIndex("PreviousLifeCycleId", "TransationId");

                    b.ToTable("EntityLifeCycleHistoryLog");
                });

            modelBuilder.Entity("SC.API.CleanArchitecture.Domain.Entities.EntityOperationLog", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("ID");

                    b.Property<string>("ApplicationUserId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("character varying(450)")
                        .HasColumnName("ApplicationUserId");

                    b.Property<long>("EntityId")
                        .HasColumnType("bigint")
                        .HasColumnName("EntityID");

                    b.Property<string>("NewObject")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("OldObject")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("OperationId")
                        .HasColumnType("integer")
                        .HasColumnName("OperationID");

                    b.Property<DateTime>("Timestamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("EntityId");

                    b.HasIndex("OperationId");

                    b.ToTable("EntityOperationLog");
                });

            modelBuilder.Entity("SC.API.CleanArchitecture.Domain.Entities.EntityProcessLog", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("ID")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ApplicationUserId")
                        .HasMaxLength(450)
                        .HasColumnType("character varying(450)")
                        .HasColumnName("ApplicationUserId");

                    b.Property<long>("EntityId")
                        .HasColumnType("bigint")
                        .HasColumnName("EntityID");

                    b.Property<string>("ExecutorName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<int?>("OperationId")
                        .HasColumnType("integer")
                        .HasColumnName("OperationID");

                    b.Property<DateTime>("Timestamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("EntityId");

                    b.HasIndex("OperationId");

                    b.HasIndex("Id", "Timestamp", "ExecutorName", "Note", "EntityId");

                    b.ToTable("EntityProcessLog");
                });

            modelBuilder.Entity("SC.API.CleanArchitecture.Domain.Entities.EntitySpecInvolvRoleTypeUse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("ID")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("EntitySpecInvolvementRoleTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("EntitySpecInvolvementRoleTypeID");

                    b.Property<int?>("PartyRoleAssociationTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("PartyRoleAssociationTypeID");

                    b.Property<long>("PartyRoleId")
                        .HasColumnType("bigint")
                        .HasColumnName("PartyRoleID");

                    b.HasKey("Id");

                    b.HasIndex("EntitySpecInvolvementRoleTypeId");

                    b.HasIndex("PartyRoleAssociationTypeId");

                    b.HasIndex("PartyRoleId");

                    b.ToTable("EntitySpecInvolvRoleTypeUses");
                });

            modelBuilder.Entity("SC.API.CleanArchitecture.Domain.Entities.EntitySpecInvolvementRoleType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("ID")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("EntitySpecificationId")
                        .HasColumnType("integer")
                        .HasColumnName("EntitySpecificationID");

                    b.Property<int>("InvolvementRoleTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("InvolvementRoleTypeID");

                    b.Property<int?>("MaxCardinality")
                        .HasColumnType("integer");

                    b.Property<int>("MinCardinality")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("InvolvementRoleTypeId");

                    b.HasIndex("EntitySpecificationId", "InvolvementRoleTypeId")
                        .IsUnique();

                    b.ToTable("EntitySpecInvolvementRoleType");
                });

            modelBuilder.Entity("SC.API.CleanArchitecture.Domain.Entities.EntitySpecLifeCycleOperation", b =>
                {
                    b.Property<int>("EntitySpecificationId")
                        .HasColumnType("integer")
                        .HasColumnName("EntitySpecificationID");

                    b.Property<int>("LifeCycleId")
                        .HasColumnType("integer")
                        .HasColumnName("LifeCycleID");

                    b.Property<int>("OperationId")
                        .HasColumnType("integer")
                        .HasColumnName("OperationID");

                    b.HasKey("EntitySpecificationId", "LifeCycleId", "OperationId");

                    b.HasIndex("LifeCycleId");

                    b.HasIndex("OperationId");

                    b.HasIndex("EntitySpecificationId", "LifeCycleId", "OperationId")
                        .IsUnique();

                    b.ToTable("EntitySpecLifeCycleOperation");
                });

            modelBuilder.Entity("SC.API.CleanArchitecture.Domain.Entities.EntitySpecification", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("ID");

                    b.Property<bool>("IsSearchable")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<int?>("LifeCycleClassDefinitionId")
                        .HasColumnType("integer")
                        .HasColumnName("LifeCycleClassDefinitionID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("LifeCycleClassDefinitionId");

                    b.ToTable("EntitySpecification");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsSearchable = false,
                            LifeCycleClassDefinitionId = 1,
                            Name = "Ticket"
                        });
                });

            modelBuilder.Entity("SC.API.CleanArchitecture.Domain.Entities.IdentificationSchema", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("ID");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<Guid>("GlobalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValue(new Guid("1b0adce3-95a7-4e3a-aec4-82bc4589c749"))
                        .HasColumnName("GlobalID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Uri")
                        .HasMaxLength(2048)
                        .HasColumnType("character varying(2048)")
                        .HasColumnName("URI");

                    b.HasKey("Id");

                    b.ToTable("IdentificationSchema");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            GlobalId = new Guid("00000000-0000-0000-0000-000000000000"),
                            Name = "HrVat"
                        },
                        new
                        {
                            Id = 2,
                            GlobalId = new Guid("00000000-0000-0000-0000-000000000000"),
                            Name = "City"
                        });
                });

            modelBuilder.Entity("SC.API.CleanArchitecture.Domain.Entities.Individual", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("ID");

                    b.Property<DateTime?>("AliveDuringDue")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("AliveDuringFrom")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("FamilyName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("GivenName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("MiddleName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Individual");

                    b.HasData(
                        new
                        {
                            Id = 2,
                            FamilyName = "2",
                            GivenName = "SCSA",
                            Username = "ServiceAccount"
                        });
                });

            modelBuilder.Entity("SC.API.CleanArchitecture.Domain.Entities.IntegrationOrganization", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("AddressBuildingNumber")
                        .HasColumnType("text");

                    b.Property<string>("AddressCity")
                        .HasColumnType("text");

                    b.Property<string>("AddressCountry")
                        .HasColumnType("text");

                    b.Property<string>("AddressPostalOfficeCode")
                        .HasColumnType("text");

                    b.Property<string>("AddressStreet")
                        .HasColumnType("text");

                    b.Property<string>("ErrorDetails")
                        .HasColumnType("text");

                    b.Property<Guid>("ExternalId")
                        .HasColumnType("uuid")
                        .HasColumnName("ExternalId");

                    b.Property<bool>("IsProcessed")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsUpdate")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Oib")
                        .HasColumnType("text");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("TransactionId")
                        .HasColumnType("uuid")
                        .HasColumnName("TransactionID");

                    b.HasKey("Id");

                    b.ToTable("IntegrationOrganizationSync");
                });

            modelBuilder.Entity("SC.API.CleanArchitecture.Domain.Entities.InvolvementRole", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("ID")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("InvolvementRoleTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("InvolvementRoleTypeID");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<long?>("PartyRoleId")
                        .HasColumnType("bigint")
                        .HasColumnName("PartyRoleID");

                    b.Property<DateTime?>("ValidDue")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("ValidFrom")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("InvolvementRoleTypeId");

                    b.HasIndex("PartyRoleId");

                    b.ToTable("InvolvementRole");
                });

            modelBuilder.Entity("SC.API.CleanArchitecture.Domain.Entities.InvolvementRoleType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("ID");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.ToTable("InvolvementRoleType");

                    b.HasData(
                        new
                        {
                            Id = 0,
                            Name = "EntityOwner"
                        },
                        new
                        {
                            Id = 1,
                            Name = "Approver"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Administrator"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Creator"
                        },
                        new
                        {
                            Id = 4,
                            Name = "AssignedTo"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Associate"
                        },
                        new
                        {
                            Id = 6,
                            Name = "AssociateReadOnly"
                        });
                });

            modelBuilder.Entity("SC.API.CleanArchitecture.Domain.Entities.InvolvementRoleTypePartyRoleTypeInvolf", b =>
                {
                    b.Property<int>("InvolvementRoleTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("InvolvementRoleTypeID");

                    b.Property<int>("PartyRoleTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("PartyRoleTypeID");

                    b.HasKey("InvolvementRoleTypeId", "PartyRoleTypeId");

                    b.HasIndex("InvolvementRoleTypeId");

                    b.HasIndex("PartyRoleTypeId");

                    b.ToTable("InvolvementRoleTypePartyRoleTypeInvolves");
                });

            modelBuilder.Entity("SC.API.CleanArchitecture.Domain.Entities.LifeCycle", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("ID");

                    b.Property<int>("LifeCycleClassDefinitionId")
                        .HasColumnType("integer")
                        .HasColumnName("LifeCycleClassDefinitionID");

                    b.Property<int>("LifeCycleStateTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("LifeCycleStateTypeID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.HasIndex("LifeCycleClassDefinitionId");

                    b.HasIndex("LifeCycleStateTypeId");

                    b.ToTable("LifeCycle");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            LifeCycleClassDefinitionId = 1,
                            LifeCycleStateTypeId = 1,
                            Name = "Created"
                        },
                        new
                        {
                            Id = 2,
                            LifeCycleClassDefinitionId = 1,
                            LifeCycleStateTypeId = 1,
                            Name = "Received"
                        },
                        new
                        {
                            Id = 3,
                            LifeCycleClassDefinitionId = 1,
                            LifeCycleStateTypeId = 2,
                            Name = "Delegated"
                        },
                        new
                        {
                            Id = 4,
                            LifeCycleClassDefinitionId = 1,
                            LifeCycleStateTypeId = 3,
                            Name = "Opened by mistake"
                        },
                        new
                        {
                            Id = 5,
                            LifeCycleClassDefinitionId = 1,
                            LifeCycleStateTypeId = 4,
                            Name = "Archived"
                        },
                        new
                        {
                            Id = 6,
                            LifeCycleClassDefinitionId = 1,
                            LifeCycleStateTypeId = 4,
                            Name = "Original"
                        },
                        new
                        {
                            Id = 7,
                            LifeCycleClassDefinitionId = 1,
                            LifeCycleStateTypeId = 3,
                            Name = "Aggregated"
                        },
                        new
                        {
                            Id = 8,
                            LifeCycleClassDefinitionId = 1,
                            LifeCycleStateTypeId = 2,
                            Name = "Suspended"
                        },
                        new
                        {
                            Id = 9,
                            LifeCycleClassDefinitionId = 1,
                            LifeCycleStateTypeId = 4,
                            Name = "Excluded"
                        },
                        new
                        {
                            Id = 10,
                            LifeCycleClassDefinitionId = 1,
                            LifeCycleStateTypeId = 4,
                            Name = "Issued"
                        },
                        new
                        {
                            Id = 11,
                            LifeCycleClassDefinitionId = 1,
                            LifeCycleStateTypeId = 4,
                            Name = "Unavailable"
                        });
                });

            modelBuilder.Entity("SC.API.CleanArchitecture.Domain.Entities.LifeCycleClassDefLifeCycleTran", b =>
                {
                    b.Property<int>("LifeCycleClassDefinitionId")
                        .HasColumnType("integer")
                        .HasColumnName("LifeCycleClassDefinitionID");

                    b.Property<int>("LifeCycleTransitionId")
                        .HasColumnType("integer")
                        .HasColumnName("LifeCycleTransitionID");

                    b.HasKey("LifeCycleClassDefinitionId", "LifeCycleTransitionId");

                    b.HasIndex("LifeCycleTransitionId");

                    b.ToTable("LifeCycleClassDefLifeCycleTran");
                });

            modelBuilder.Entity("SC.API.CleanArchitecture.Domain.Entities.LifeCycleClassDefinition", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("ID");

                    b.Property<string>("ClassName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.ToTable("LifeCycleClassDefinition");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClassName = "TicketLifeCycle"
                        });
                });

            modelBuilder.Entity("SC.API.CleanArchitecture.Domain.Entities.LifeCycleStateType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("ID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)");

                    b.HasKey("Id");

                    b.ToTable("LifeCycleStateType");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Initial"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Transition"
                        },
                        new
                        {
                            Id = 3,
                            Name = "SemiFinal"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Final"
                        });
                });

            modelBuilder.Entity("SC.API.CleanArchitecture.Domain.Entities.LifeCycleTransition", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("ID");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.ToTable("LifeCycleTransition");
                });

            modelBuilder.Entity("SC.API.CleanArchitecture.Domain.Entities.LifeCycleTransitionTable", b =>
                {
                    b.Property<int>("CurrentLifeCycleId")
                        .HasColumnType("integer")
                        .HasColumnName("CurrentLifeCycleID");

                    b.Property<int>("TransitionId")
                        .HasColumnType("integer")
                        .HasColumnName("TransitionID");

                    b.Property<int>("NextLifeCycleId")
                        .HasColumnType("integer")
                        .HasColumnName("NextLifeCycleID");

                    b.HasKey("CurrentLifeCycleId", "TransitionId");

                    b.HasIndex("CurrentLifeCycleId");

                    b.HasIndex("NextLifeCycleId");

                    b.HasIndex("TransitionId");

                    b.ToTable("LifeCycleTransitionTable");
                });

            modelBuilder.Entity("SC.API.CleanArchitecture.Domain.Entities.MimeType", b =>
                {
                    b.Property<string>("Extension")
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("character varying(25)");

                    b.Property<string>("CommonName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("FullTextSearchable")
                        .HasColumnType("boolean");

                    b.HasKey("Extension");

                    b.ToTable("MimeType");
                });

            modelBuilder.Entity("SC.API.CleanArchitecture.Domain.Entities.Operation", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("ID");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Operation");
                });

            modelBuilder.Entity("SC.API.CleanArchitecture.Domain.Entities.OperationInvolvementRoleType", b =>
                {
                    b.Property<int>("OperationId")
                        .HasColumnType("integer")
                        .HasColumnName("OperationID");

                    b.Property<int>("InvolvementRoleTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("InvolvementRoleTypeID");

                    b.HasKey("OperationId", "InvolvementRoleTypeId")
                        .HasName("PK_dbo.OperationInvolvementRoleType");

                    b.HasIndex("InvolvementRoleTypeId");

                    b.HasIndex("OperationId");

                    b.ToTable("OperationInvolvementRoleType");
                });

            modelBuilder.Entity("SC.API.CleanArchitecture.Domain.Entities.Organization", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("ID");

                    b.Property<string>("AddressCity")
                        .HasColumnType("text");

                    b.Property<string>("AddressCountry")
                        .HasColumnType("text");

                    b.Property<string>("AddressLine")
                        .HasColumnType("text");

                    b.Property<string>("AddressPostalOfficeCode")
                        .HasColumnType("text");

                    b.Property<string>("AddressStreetAndBuildingNumber")
                        .HasColumnType("text");

                    b.Property<string>("Code")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("ExistingDuringDue")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("ExistingDuringFrom")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Level")
                        .HasColumnType("integer");

                    b.Property<string>("LongName")
                        .HasColumnType("text");

                    b.Property<string>("TradingName")
                        .HasMaxLength(510)
                        .HasColumnType("character varying(510)");

                    b.Property<string>("Type")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Organization");
                });

            modelBuilder.Entity("SC.API.CleanArchitecture.Domain.Entities.Party", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("ID")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("AdditionalExternalIDIdentificationSchemaId")
                        .HasColumnType("integer")
                        .HasColumnName("AdditionalExternalIDIdentificationSchemaID");

                    b.Property<string>("AdditionalExternalId")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("AdditionalExternalID");

                    b.Property<string>("ExternalId")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("ExternalID");

                    b.Property<int?>("ExternalIdIdentificationSchemaId")
                        .HasColumnType("integer")
                        .HasColumnName("ExternalIDIdentificationSchemaID");

                    b.Property<Guid>("GlobalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValue(new Guid("4f9436a1-e4af-467d-ad2f-2081ac4b6c7e"))
                        .HasColumnName("GlobalID");

                    b.Property<int>("Level")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ExternalIdIdentificationSchemaId", "ExternalId")
                        .IsUnique();

                    b.ToTable("Party");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ExternalId = "61817894937",
                            ExternalIdIdentificationSchemaId = 2,
                            GlobalId = new Guid("3cebb7da-4cfa-46e7-be74-66df1e4a6e7c"),
                            Level = 0
                        },
                        new
                        {
                            Id = 2,
                            ExternalId = "-",
                            ExternalIdIdentificationSchemaId = 1,
                            GlobalId = new Guid("a3149834-b9c7-497a-bb1c-206504a17aa4"),
                            Level = 0
                        });
                });

            modelBuilder.Entity("SC.API.CleanArchitecture.Domain.Entities.PartyRole", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("ID")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<string>("JobCode")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("JobTitle")
                        .HasMaxLength(510)
                        .HasColumnType("character varying(510)");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int?>("PartyId")
                        .HasColumnType("integer")
                        .HasColumnName("PartyID");

                    b.Property<int>("PartyRoleTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("PartyRoleTypeID");

                    b.Property<DateTime?>("ValidDue")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("ValidFrom")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id");

                    b.HasIndex("PartyId");

                    b.HasIndex("PartyRoleTypeId");

                    b.ToTable("PartyRole");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            IsActive = true,
                            PartyId = 1,
                            PartyRoleTypeId = 31,
                            ValidFrom = new DateTime(2020, 12, 21, 14, 46, 19, 263, DateTimeKind.Utc).AddTicks(7881)
                        });
                });

            modelBuilder.Entity("SC.API.CleanArchitecture.Domain.Entities.PartyRoleAssociation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("ID")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<int>("PartyRoleAssociationTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("PartyRoleAssociationTypeID");

                    b.Property<long>("PartyRoleInvolvedWithId")
                        .HasColumnType("bigint")
                        .HasColumnName("PartyRoleInvolvedWithID");

                    b.Property<long>("PartyRoleInvolvesId")
                        .HasColumnType("bigint")
                        .HasColumnName("PartyRoleInvolvesID");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime?>("ValidDue")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("ValidFrom")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("PartyRoleAssociationTypeId");

                    b.HasIndex("PartyRoleInvolvedWithId");

                    b.HasIndex("PartyRoleInvolvesId");

                    b.HasIndex("PartyRoleInvolvedWithId", "PartyRoleInvolvesId");

                    b.HasIndex("PartyRoleInvolvedWithId", "PartyRoleInvolvesId", "PartyRoleAssociationTypeId")
                        .HasDatabaseName("IX_PartyRoleAssociation_PartyRoleInvolvedWithID_PartyRoleInvo~1");

                    b.ToTable("PartyRoleAssociation");
                });

            modelBuilder.Entity("SC.API.CleanArchitecture.Domain.Entities.PartyRoleAssociationType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("ID");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.ToTable("PartyRoleAssociationType");

                    b.HasData(
                        new
                        {
                            Id = 0,
                            Name = "EntityObjectAccess"
                        },
                        new
                        {
                            Id = 1,
                            Name = "Employment"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Membership"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Workplace"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Management"
                        },
                        new
                        {
                            Id = 5,
                            Name = "EntityObjectAdministration"
                        },
                        new
                        {
                            Id = 6,
                            Name = "ServiceProviding"
                        },
                        new
                        {
                            Id = 7,
                            Name = "OrganizationDecomposition"
                        });
                });

            modelBuilder.Entity("SC.API.CleanArchitecture.Domain.Entities.PartyRoleContactableVia", b =>
                {
                    b.Property<long>("ContactMediumId")
                        .HasColumnType("bigint")
                        .HasColumnName("ContactMediumID");

                    b.Property<long>("PartyRoleId")
                        .HasColumnType("bigint")
                        .HasColumnName("PartyRoleID");

                    b.HasKey("ContactMediumId", "PartyRoleId");

                    b.HasIndex("ContactMediumId");

                    b.HasIndex("PartyRoleId");

                    b.ToTable("PartyRoleContactableVia");
                });

            modelBuilder.Entity("SC.API.CleanArchitecture.Domain.Entities.PartyRoleType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("ID");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int?>("ParentClassId")
                        .HasColumnType("integer")
                        .HasColumnName("ParentClassID");

                    b.Property<int>("PartyRoleTypeDiscriminatorId")
                        .HasColumnType("integer")
                        .HasColumnName("PartyRoleTypeDiscriminatorID");

                    b.HasKey("Id");

                    b.HasIndex("ParentClassId");

                    b.HasIndex("PartyRoleTypeDiscriminatorId");

                    b.ToTable("PartyRoleType");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Employee",
                            PartyRoleTypeDiscriminatorId = 2
                        },
                        new
                        {
                            Id = 2,
                            Name = "Employer",
                            PartyRoleTypeDiscriminatorId = 1
                        },
                        new
                        {
                            Id = 3,
                            Name = "Team",
                            PartyRoleTypeDiscriminatorId = 1
                        },
                        new
                        {
                            Id = 4,
                            Name = "TeamMember",
                            PartyRoleTypeDiscriminatorId = 2
                        },
                        new
                        {
                            Id = 5,
                            Name = "Organization",
                            PartyRoleTypeDiscriminatorId = 1
                        },
                        new
                        {
                            Id = 6,
                            Name = "OrganizationDepartment",
                            PartyRoleTypeDiscriminatorId = 1
                        },
                        new
                        {
                            Id = 7,
                            Name = "OrganizationPost",
                            PartyRoleTypeDiscriminatorId = 2
                        },
                        new
                        {
                            Id = 8,
                            Name = "OrganizationExpertTeam",
                            PartyRoleTypeDiscriminatorId = 1
                        },
                        new
                        {
                            Id = 9,
                            Name = "OrganizationSpecialistTeam",
                            PartyRoleTypeDiscriminatorId = 1
                        },
                        new
                        {
                            Id = 13,
                            Name = "Customer",
                            PartyRoleTypeDiscriminatorId = 1
                        },
                        new
                        {
                            Id = 14,
                            Name = "Partner",
                            PartyRoleTypeDiscriminatorId = 1
                        },
                        new
                        {
                            Id = 15,
                            Name = "Supplier",
                            PartyRoleTypeDiscriminatorId = 1
                        },
                        new
                        {
                            Id = 16,
                            Name = "Buyer",
                            PartyRoleTypeDiscriminatorId = 1
                        },
                        new
                        {
                            Id = 17,
                            Name = "Competitor",
                            PartyRoleTypeDiscriminatorId = 1
                        },
                        new
                        {
                            Id = 18,
                            Name = "Vendor",
                            PartyRoleTypeDiscriminatorId = 1
                        },
                        new
                        {
                            Id = 19,
                            Name = "ServiceProvider",
                            PartyRoleTypeDiscriminatorId = 1
                        },
                        new
                        {
                            Id = 20,
                            Name = "Intermediary",
                            PartyRoleTypeDiscriminatorId = 1
                        },
                        new
                        {
                            Id = 25,
                            Name = "ServiceProviderServiceAccount",
                            PartyRoleTypeDiscriminatorId = 1
                        },
                        new
                        {
                            Id = 26,
                            Name = "PlatformOwner",
                            PartyRoleTypeDiscriminatorId = 1
                        },
                        new
                        {
                            Id = 27,
                            Name = "Member",
                            PartyRoleTypeDiscriminatorId = 2
                        },
                        new
                        {
                            Id = 28,
                            Name = "MemberBusinessAdministrator",
                            PartyRoleTypeDiscriminatorId = 2
                        },
                        new
                        {
                            Id = 29,
                            Name = "MemberBusinessApprover",
                            PartyRoleTypeDiscriminatorId = 2
                        },
                        new
                        {
                            Id = 30,
                            Name = "OrganizationPostCEO",
                            PartyRoleTypeDiscriminatorId = 2
                        },
                        new
                        {
                            Id = 31,
                            Name = "Tenant",
                            PartyRoleTypeDiscriminatorId = 1
                        });
                });

            modelBuilder.Entity("SC.API.CleanArchitecture.Domain.Entities.PartyRoleTypeDiscriminator", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("ID");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.ToTable("PartyRoleTypeDiscriminator");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "OrganizationPartyRoleTypes"
                        },
                        new
                        {
                            Id = 2,
                            Name = "IndividualPartyRoleTypes"
                        });
                });

            modelBuilder.Entity("SC.API.CleanArchitecture.Domain.Entities.Permission", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("ID");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int?>("PermissionGroupId")
                        .HasColumnType("integer")
                        .HasColumnName("PermissionGroupID");

                    b.Property<int>("PermissionLevelId")
                        .HasColumnType("integer")
                        .HasColumnName("PermissionLevelID");

                    b.Property<int>("PermissionTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("PermissionTypeID");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("PermissionGroupId");

                    b.HasIndex("PermissionLevelId");

                    b.HasIndex("PermissionTypeId");

                    b.ToTable("Permission");
                });

            modelBuilder.Entity("SC.API.CleanArchitecture.Domain.Entities.PermissionGroup", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("ID");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.ToTable("PermissionGroup");
                });

            modelBuilder.Entity("SC.API.CleanArchitecture.Domain.Entities.PermissionLevel", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("ID");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.ToTable("PermissionLevel");
                });

            modelBuilder.Entity("SC.API.CleanArchitecture.Domain.Entities.PermissionPartyRoleAssociation", b =>
                {
                    b.Property<int>("PermissionId")
                        .HasColumnType("integer")
                        .HasColumnName("PermissionID");

                    b.Property<int>("PartyRoleAssociationId")
                        .HasColumnType("integer")
                        .HasColumnName("PartyRoleAssociationID");

                    b.HasKey("PermissionId", "PartyRoleAssociationId")
                        .HasName("PK_dbo.PermissionPartyRoleAssociation");

                    b.HasIndex("PartyRoleAssociationId");

                    b.HasIndex("PermissionId");

                    b.ToTable("PermissionPartyRoleAssociation");
                });

            modelBuilder.Entity("SC.API.CleanArchitecture.Domain.Entities.PermissionRelationship", b =>
                {
                    b.Property<int>("PermissionId")
                        .HasColumnType("integer")
                        .HasColumnName("PermissionID");

                    b.Property<int>("RelatedPermissionId")
                        .HasColumnType("integer")
                        .HasColumnName("RelatedPermissionID");

                    b.HasKey("PermissionId", "RelatedPermissionId");

                    b.HasIndex("RelatedPermissionId");

                    b.ToTable("PermissionRelationship");
                });

            modelBuilder.Entity("SC.API.CleanArchitecture.Domain.Entities.PermissionTemplate", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("ID");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.ToTable("PermissionTemplate");
                });

            modelBuilder.Entity("SC.API.CleanArchitecture.Domain.Entities.PermissionTemplatePermission", b =>
                {
                    b.Property<int>("PermissionTemplateId")
                        .HasColumnType("integer")
                        .HasColumnName("PermissionTemplateID");

                    b.Property<int>("PermissionId")
                        .HasColumnType("integer")
                        .HasColumnName("PermissionID");

                    b.HasKey("PermissionTemplateId", "PermissionId");

                    b.HasIndex("PermissionId");

                    b.ToTable("PermissionTemplatePermission");
                });

            modelBuilder.Entity("SC.API.CleanArchitecture.Domain.Entities.PermissionType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("ID");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.ToTable("PermissionType");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("SC.API.CleanArchitecture.Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("SC.API.CleanArchitecture.Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SC.API.CleanArchitecture.Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("SC.API.CleanArchitecture.Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SC.API.CleanArchitecture.Domain.Entities.ApplicationRoleClaim", b =>
                {
                    b.HasOne("SC.API.CleanArchitecture.Domain.Entities.ApplicationRole", "Role")
                        .WithMany("RoleClaims")
                        .HasForeignKey("RoleId");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("SC.API.CleanArchitecture.Domain.Entities.ApplicationUser", b =>
                {
                    b.HasOne("SC.API.CleanArchitecture.Domain.Entities.Party", "Party")
                        .WithMany("Users")
                        .HasForeignKey("PartyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Party");
                });

            modelBuilder.Entity("SC.API.CleanArchitecture.Domain.Entities.ApplicationUserRole", b =>
                {
                    b.HasOne("SC.API.CleanArchitecture.Domain.Entities.ApplicationRole", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId");

                    b.HasOne("SC.API.CleanArchitecture.Domain.Entities.ApplicationUser", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId");

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SC.API.CleanArchitecture.Domain.Entities.Catalog", b =>
                {
                    b.HasOne("SC.API.CleanArchitecture.Domain.Entities.Catalog", "ParentCatalog")
                        .WithMany("Catalogs")
                        .HasForeignKey("ParentCatalogId")
                        .HasConstraintName("FK_Catalog_ParentCatalog");

                    b.Navigation("ParentCatalog");
                });

            modelBuilder.Entity("SC.API.CleanArchitecture.Domain.Entities.CatalogItem", b =>
                {
                    b.HasOne("SC.API.CleanArchitecture.Domain.Entities.Catalog", "Catalog")
                        .WithMany("CatalogItems")
                        .HasForeignKey("CatalogId")
                        .HasConstraintName("FK_CatalogItem_Catalog")
                        .IsRequired();

                    b.HasOne("SC.API.CleanArchitecture.Domain.Entities.CatalogItem", "ParentCatalogItem")
                        .WithMany("CatalogItems")
                        .HasForeignKey("ParentCatalogItemId");

                    b.HasOne("SC.API.CleanArchitecture.Domain.Entities.Party", "RecordedByParty")
                        .WithMany("CatalogItems")
                        .HasForeignKey("RecordedByPartyId")
                        .HasConstraintName("FK_CatalogItem_Party");

                    b.Navigation("Catalog");

                    b.Navigation("ParentCatalogItem");

                    b.Navigation("RecordedByParty");
                });

            modelBuilder.Entity("SC.API.CleanArchitecture.Domain.Entities.ContactMedium", b =>
                {
                    b.HasOne("SC.API.CleanArchitecture.Domain.Entities.ContactMediumClass", "ContactMediumClass")
                        .WithMany("ContactMedia")
                        .HasForeignKey("ContactMediumClassId")
                        .HasConstraintName("FK_ContactMedium_ContactMediumClass")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ContactMediumClass");
                });

            modelBuilder.Entity("SC.API.CleanArchitecture.Domain.Entities.Document", b =>
                {
                    b.HasOne("SC.API.CleanArchitecture.Domain.Entities.DocumentExtension", null)
                        .WithMany("Documents")
                        .HasForeignKey("DocumentExtensionExtension");

                    b.HasOne("SC.API.CleanArchitecture.Domain.Entities.DocumentTemplate", "DocumentTemplate")
                        .WithMany("Documents")
                        .HasForeignKey("DocumentTemplateId")
                        .HasConstraintName("FK_Document_DocumentTemplate1");

                    b.HasOne("SC.API.CleanArchitecture.Domain.Entities.MimeType", "ExtensionNavigation")
                        .WithMany("Documents")
                        .HasForeignKey("Extension")
                        .IsRequired();

                    b.Navigation("DocumentTemplate");

                    b.Navigation("ExtensionNavigation");
                });

            modelBuilder.Entity("SC.API.CleanArchitecture.Domain.Entities.DocumentTemplate", b =>
                {
                    b.HasOne("SC.API.CleanArchitecture.Domain.Entities.DocumentExtension", null)
                        .WithMany("DocumentTemplates")
                        .HasForeignKey("DocumentExtensionExtension");

                    b.HasOne("SC.API.CleanArchitecture.Domain.Entities.MimeType", "ExtensionNavigation")
                        .WithMany("DocumentTemplates")
                        .HasForeignKey("Extension")
                        .HasConstraintName("FK_DocumentTemplate_MimeType")
                        .IsRequired();

                    b.Navigation("ExtensionNavigation");
                });

            modelBuilder.Entity("SC.API.CleanArchitecture.Domain.Entities.Entity", b =>
                {
                    b.HasOne("SC.API.CleanArchitecture.Domain.Entities.EntitySpecification", "EntitySpecification")
                        .WithMany("Entities")
                        .HasForeignKey("EntitySpecificationId")
                        .HasConstraintName("FK_Entity_EntitySpecification")
                        .IsRequired();

                    b.HasOne("SC.API.CleanArchitecture.Domain.Entities.Individual", "LifeCycleChangeByParty")
                        .WithMany("EntityLifeCycleChangeByParties")
                        .HasForeignKey("LifeCycleChangeByPartyId")
                        .HasConstraintName("FK_Entity_Individual1");

                    b.HasOne("SC.API.CleanArchitecture.Domain.Entities.LifeCycle", "LifeCycle")
                        .WithMany("Entities")
                        .HasForeignKey("LifeCycleId")
                        .HasConstraintName("FK_Entity_LifeCycle")
                        .IsRequired();

                    b.HasOne("SC.API.CleanArchitecture.Domain.Entities.Individual", "ModifiedByParty")
                        .WithMany("EntityModifiedByParties")
                        .HasForeignKey("ModifiedByPartyId")
                        .HasConstraintName("FK_Entity_Individual2");

                    b.HasOne("SC.API.CleanArchitecture.Domain.Entities.Individual", "RecordedByParty")
                        .WithMany("EntityRecordedByParties")
                        .HasForeignKey("RecordedByPartyId")
                        .HasConstraintName("FK_Entity_Individual")
                        .IsRequired();

                    b.Navigation("EntitySpecification");

                    b.Navigation("LifeCycle");

                    b.Navigation("LifeCycleChangeByParty");

                    b.Navigation("ModifiedByParty");

                    b.Navigation("RecordedByParty");
                });

            modelBuilder.Entity("SC.API.CleanArchitecture.Domain.Entities.EntityDocument", b =>
                {
                    b.HasOne("SC.API.CleanArchitecture.Domain.Entities.Document", "Document")
                        .WithMany("EntityDocuments")
                        .HasForeignKey("DocumentId")
                        .HasConstraintName("FK_dbo.EntityDocument_dbo.Document_DocumentID")
                        .IsRequired();

                    b.HasOne("SC.API.CleanArchitecture.Domain.Entities.Entity", "Entity")
                        .WithMany("EntityDocuments")
                        .HasForeignKey("EntityId")
                        .HasConstraintName("FK_dbo.EntityDocument_dbo.Entity_EntityID")
                        .IsRequired();

                    b.Navigation("Document");

                    b.Navigation("Entity");
                });

            modelBuilder.Entity("SC.API.CleanArchitecture.Domain.Entities.EntityInvolvementRole", b =>
                {
                    b.HasOne("SC.API.CleanArchitecture.Domain.Entities.Entity", "Entity")
                        .WithMany("EntityInvolvementRoles")
                        .HasForeignKey("EntityId")
                        .HasConstraintName("FK_dbo.EntityInvolvementRole_dbo.Entity_EntityID")
                        .IsRequired();

                    b.HasOne("SC.API.CleanArchitecture.Domain.Entities.InvolvementRole", "InvolvementRole")
                        .WithOne("EntityInvolvementRole")
                        .HasForeignKey("SC.API.CleanArchitecture.Domain.Entities.EntityInvolvementRole", "Id")
                        .HasConstraintName("FK_dbo.EntityInvolvementRole_dbo.InvolvementRole_ID")
                        .IsRequired();

                    b.Navigation("Entity");

                    b.Navigation("InvolvementRole");
                });

            modelBuilder.Entity("SC.API.CleanArchitecture.Domain.Entities.EntityLifeCycleHistoryLog", b =>
                {
                    b.HasOne("SC.API.CleanArchitecture.Domain.Entities.Entity", "Entity")
                        .WithMany("EntityLifeCycleHistoryLogs")
                        .HasForeignKey("EntityId")
                        .HasConstraintName("FK_EntityLifeCycleHistoryLog_Entity")
                        .IsRequired();

                    b.HasOne("SC.API.CleanArchitecture.Domain.Entities.LifeCycleTransitionTable", "LifeCycleTransitionTable")
                        .WithMany("EntityLifeCycleHistoryLogs")
                        .HasForeignKey("PreviousLifeCycleId", "TransationId")
                        .HasConstraintName("FK_EntityLifeCycleHistoryLog_LifeCycleTransitionTable")
                        .IsRequired();

                    b.Navigation("Entity");

                    b.Navigation("LifeCycleTransitionTable");
                });

            modelBuilder.Entity("SC.API.CleanArchitecture.Domain.Entities.EntityOperationLog", b =>
                {
                    b.HasOne("SC.API.CleanArchitecture.Domain.Entities.ApplicationUser", "ApplicationUser")
                        .WithMany("EntityOperationLogs")
                        .HasForeignKey("ApplicationUserId")
                        .HasConstraintName("FK_EntityOperationLog_AspNetUsers")
                        .IsRequired();

                    b.HasOne("SC.API.CleanArchitecture.Domain.Entities.Entity", "Entity")
                        .WithMany("EntityOperationLogs")
                        .HasForeignKey("EntityId")
                        .HasConstraintName("FK_EntityOperationLog_Entity")
                        .IsRequired();

                    b.HasOne("SC.API.CleanArchitecture.Domain.Entities.Operation", "Operation")
                        .WithMany("EntityOperationLogs")
                        .HasForeignKey("OperationId")
                        .HasConstraintName("FK_EntityOperationLog_Operation")
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("Entity");

                    b.Navigation("Operation");
                });

            modelBuilder.Entity("SC.API.CleanArchitecture.Domain.Entities.EntityProcessLog", b =>
                {
                    b.HasOne("SC.API.CleanArchitecture.Domain.Entities.ApplicationUser", "ApplicationUser")
                        .WithMany("EntityProcessLogs")
                        .HasForeignKey("ApplicationUserId")
                        .HasConstraintName("FK_EntityProcessLog_AspNetUsers");

                    b.HasOne("SC.API.CleanArchitecture.Domain.Entities.Entity", "Entity")
                        .WithMany("EntityProcessLogs")
                        .HasForeignKey("EntityId")
                        .HasConstraintName("FK_EntityProcessLog_Entity")
                        .IsRequired();

                    b.HasOne("SC.API.CleanArchitecture.Domain.Entities.Operation", "Operation")
                        .WithMany("EntityProcessLogs")
                        .HasForeignKey("OperationId")
                        .HasConstraintName("FK_EntityProcessLog_Operation");

                    b.Navigation("ApplicationUser");

                    b.Navigation("Entity");

                    b.Navigation("Operation");
                });

            modelBuilder.Entity("SC.API.CleanArchitecture.Domain.Entities.EntitySpecInvolvRoleTypeUse", b =>
                {
                    b.HasOne("SC.API.CleanArchitecture.Domain.Entities.EntitySpecInvolvementRoleType", "EntitySpecInvolvementRoleType")
                        .WithMany("EntitySpecInvolvRoleTypeUses")
                        .HasForeignKey("EntitySpecInvolvementRoleTypeId")
                        .HasConstraintName("FK_dbo.EntitySpecInvolvRoleTypeUses_dbo.EntitySpecInvolvementRoleType_EntitySpecInvolvementRoleTypeID")
                        .IsRequired();

                    b.HasOne("SC.API.CleanArchitecture.Domain.Entities.PartyRoleAssociationType", "PartyRoleAssociationType")
                        .WithMany("EntitySpecInvolvRoleTypeUses")
                        .HasForeignKey("PartyRoleAssociationTypeId")
                        .HasConstraintName("FK_dbo.EntitySpecInvolvRoleTypeUses_dbo.PartyRoleAssociationType_PartyRoleAssociationTypeID");

                    b.HasOne("SC.API.CleanArchitecture.Domain.Entities.PartyRole", "PartyRole")
                        .WithMany("EntitySpecInvolvRoleTypeUses")
                        .HasForeignKey("PartyRoleId")
                        .HasConstraintName("FK_dbo.EntitySpecInvolvRoleTypeUses_dbo.PartyRole_PartyRoleID")
                        .IsRequired();

                    b.Navigation("EntitySpecInvolvementRoleType");

                    b.Navigation("PartyRole");

                    b.Navigation("PartyRoleAssociationType");
                });

            modelBuilder.Entity("SC.API.CleanArchitecture.Domain.Entities.EntitySpecInvolvementRoleType", b =>
                {
                    b.HasOne("SC.API.CleanArchitecture.Domain.Entities.EntitySpecification", "EntitySpecification")
                        .WithMany("EntitySpecInvolvementRoleTypes")
                        .HasForeignKey("EntitySpecificationId")
                        .HasConstraintName("FK_EntitySpecInvolvementRoleType_EntitySpecification")
                        .IsRequired();

                    b.HasOne("SC.API.CleanArchitecture.Domain.Entities.InvolvementRoleType", "InvolvementRoleType")
                        .WithMany("EntitySpecInvolvementRoleTypes")
                        .HasForeignKey("InvolvementRoleTypeId")
                        .HasConstraintName("FK_EntitySpecInvolvementRoleType_InvolvementRoleType")
                        .IsRequired();

                    b.Navigation("EntitySpecification");

                    b.Navigation("InvolvementRoleType");
                });

            modelBuilder.Entity("SC.API.CleanArchitecture.Domain.Entities.EntitySpecLifeCycleOperation", b =>
                {
                    b.HasOne("SC.API.CleanArchitecture.Domain.Entities.EntitySpecification", "EntitySpecification")
                        .WithMany("EntitySpecLifeCycleOperations")
                        .HasForeignKey("EntitySpecificationId")
                        .HasConstraintName("FK_EntitySpecLifeCycleOperation_EntitySpecification")
                        .IsRequired();

                    b.HasOne("SC.API.CleanArchitecture.Domain.Entities.LifeCycle", "LifeCycle")
                        .WithMany("EntitySpecLifeCycleOperations")
                        .HasForeignKey("LifeCycleId")
                        .HasConstraintName("FK_EntitySpecLifeCycleOperation_LifeCycle")
                        .IsRequired();

                    b.HasOne("SC.API.CleanArchitecture.Domain.Entities.Operation", "Operation")
                        .WithMany("EntitySpecLifeCycleOperations")
                        .HasForeignKey("OperationId")
                        .HasConstraintName("FK_EntitySpecLifeCycleOperation_Operation")
                        .IsRequired();

                    b.Navigation("EntitySpecification");

                    b.Navigation("LifeCycle");

                    b.Navigation("Operation");
                });

            modelBuilder.Entity("SC.API.CleanArchitecture.Domain.Entities.EntitySpecification", b =>
                {
                    b.HasOne("SC.API.CleanArchitecture.Domain.Entities.LifeCycleClassDefinition", "LifeCycleClassDefinition")
                        .WithMany("EntitySpecifications")
                        .HasForeignKey("LifeCycleClassDefinitionId")
                        .HasConstraintName("FK_EntitySpecification_LifeCycleClassDefinition");

                    b.Navigation("LifeCycleClassDefinition");
                });

            modelBuilder.Entity("SC.API.CleanArchitecture.Domain.Entities.Individual", b =>
                {
                    b.HasOne("SC.API.CleanArchitecture.Domain.Entities.Party", "Party")
                        .WithOne("Individual")
                        .HasForeignKey("SC.API.CleanArchitecture.Domain.Entities.Individual", "Id")
                        .HasConstraintName("FK_Individual_Party")
                        .IsRequired();

                    b.Navigation("Party");
                });

            modelBuilder.Entity("SC.API.CleanArchitecture.Domain.Entities.InvolvementRole", b =>
                {
                    b.HasOne("SC.API.CleanArchitecture.Domain.Entities.InvolvementRoleType", "InvolvementRoleType")
                        .WithMany("InvolvementRoles")
                        .HasForeignKey("InvolvementRoleTypeId")
                        .HasConstraintName("FK_dbo.InvolvementRole_dbo.InvolvementRoleType_InvolvementRoleTypeID")
                        .IsRequired();

                    b.HasOne("SC.API.CleanArchitecture.Domain.Entities.PartyRole", "PartyRole")
                        .WithMany("InvolvementRoles")
                        .HasForeignKey("PartyRoleId")
                        .HasConstraintName("FK_dbo.InvolvementRole_dbo.PartyRole_PartyRoleID");

                    b.Navigation("InvolvementRoleType");

                    b.Navigation("PartyRole");
                });

            modelBuilder.Entity("SC.API.CleanArchitecture.Domain.Entities.InvolvementRoleTypePartyRoleTypeInvolf", b =>
                {
                    b.HasOne("SC.API.CleanArchitecture.Domain.Entities.InvolvementRoleType", "InvolvementRoleType")
                        .WithMany("InvolvementRoleTypePartyRoleTypeInvolves")
                        .HasForeignKey("InvolvementRoleTypeId")
                        .HasConstraintName("FK_dbo.InvolvementRoleTypePartyRoleTypeInvolves_dbo.InvolvementRoleType_InvolvementRoleTypeID")
                        .IsRequired();

                    b.HasOne("SC.API.CleanArchitecture.Domain.Entities.PartyRoleType", "PartyRoleType")
                        .WithMany("InvolvementRoleTypePartyRoleTypeInvolves")
                        .HasForeignKey("PartyRoleTypeId")
                        .HasConstraintName("FK_dbo.InvolvementRoleTypePartyRoleTypeInvolves_dbo.PartyRoleType_PartyRoleTypeID")
                        .IsRequired();

                    b.Navigation("InvolvementRoleType");

                    b.Navigation("PartyRoleType");
                });

            modelBuilder.Entity("SC.API.CleanArchitecture.Domain.Entities.LifeCycle", b =>
                {
                    b.HasOne("SC.API.CleanArchitecture.Domain.Entities.LifeCycleClassDefinition", "LifeCycleClassDefinition")
                        .WithMany("LifeCycles")
                        .HasForeignKey("LifeCycleClassDefinitionId")
                        .HasConstraintName("FK_LifeCycle_LifeCycleClassDefinition")
                        .IsRequired();

                    b.HasOne("SC.API.CleanArchitecture.Domain.Entities.LifeCycleStateType", "LifeCycleStateType")
                        .WithMany("LifeCycles")
                        .HasForeignKey("LifeCycleStateTypeId")
                        .HasConstraintName("FK_LifeCycle_LifeCycleStateType")
                        .IsRequired();

                    b.Navigation("LifeCycleClassDefinition");

                    b.Navigation("LifeCycleStateType");
                });

            modelBuilder.Entity("SC.API.CleanArchitecture.Domain.Entities.LifeCycleClassDefLifeCycleTran", b =>
                {
                    b.HasOne("SC.API.CleanArchitecture.Domain.Entities.LifeCycleClassDefinition", "LifeCycleClassDefinition")
                        .WithMany("LifeCycleClassDefLifeCycleTrans")
                        .HasForeignKey("LifeCycleClassDefinitionId")
                        .HasConstraintName("FK_LifeCycleClassDefLifeCycleTran_LifeCycleClassDefinition")
                        .IsRequired();

                    b.HasOne("SC.API.CleanArchitecture.Domain.Entities.LifeCycleTransition", "LifeCycleTransition")
                        .WithMany("LifeCycleClassDefLifeCycleTrans")
                        .HasForeignKey("LifeCycleTransitionId")
                        .HasConstraintName("FK_LifeCycleClassDefLifeCycleTran_LifeCycleTransition")
                        .IsRequired();

                    b.Navigation("LifeCycleClassDefinition");

                    b.Navigation("LifeCycleTransition");
                });

            modelBuilder.Entity("SC.API.CleanArchitecture.Domain.Entities.LifeCycleTransitionTable", b =>
                {
                    b.HasOne("SC.API.CleanArchitecture.Domain.Entities.LifeCycle", "CurrentLifeCycle")
                        .WithMany("LifeCycleTransitionTableCurrentLifeCycles")
                        .HasForeignKey("CurrentLifeCycleId")
                        .HasConstraintName("FK_dbo.LifeCycleTransitionTable_dbo.LifeCycle_CurrentLifeCycleID")
                        .IsRequired();

                    b.HasOne("SC.API.CleanArchitecture.Domain.Entities.LifeCycle", "NextLifeCycle")
                        .WithMany("LifeCycleTransitionTableNextLifeCycles")
                        .HasForeignKey("NextLifeCycleId")
                        .HasConstraintName("FK_dbo.LifeCycleTransitionTable_dbo.LifeCycle_NextLifeCycleID")
                        .IsRequired();

                    b.HasOne("SC.API.CleanArchitecture.Domain.Entities.LifeCycleTransition", "Transition")
                        .WithMany("LifeCycleTransitionTables")
                        .HasForeignKey("TransitionId")
                        .HasConstraintName("FK_LifeCycleTransitionTable_LifeCycleTransition")
                        .IsRequired();

                    b.Navigation("CurrentLifeCycle");

                    b.Navigation("NextLifeCycle");

                    b.Navigation("Transition");
                });

            modelBuilder.Entity("SC.API.CleanArchitecture.Domain.Entities.OperationInvolvementRoleType", b =>
                {
                    b.HasOne("SC.API.CleanArchitecture.Domain.Entities.InvolvementRoleType", "InvolvementRoleType")
                        .WithMany("OperationInvolvementRoleTypes")
                        .HasForeignKey("InvolvementRoleTypeId")
                        .HasConstraintName("FK_dbo.OperationInvolvementRoleType_dbo.InvolvementRoleType_InvolvementRoleTypeID")
                        .IsRequired();

                    b.HasOne("SC.API.CleanArchitecture.Domain.Entities.Operation", "Operation")
                        .WithMany("OperationInvolvementRoleTypes")
                        .HasForeignKey("OperationId")
                        .HasConstraintName("FK_dbo.OperationInvolvementRoleType_dbo.Operation_OperationID")
                        .IsRequired();

                    b.Navigation("InvolvementRoleType");

                    b.Navigation("Operation");
                });

            modelBuilder.Entity("SC.API.CleanArchitecture.Domain.Entities.Organization", b =>
                {
                    b.HasOne("SC.API.CleanArchitecture.Domain.Entities.Party", "Party")
                        .WithOne("Organization")
                        .HasForeignKey("SC.API.CleanArchitecture.Domain.Entities.Organization", "Id")
                        .HasConstraintName("FK_Organization_Party")
                        .IsRequired();

                    b.Navigation("Party");
                });

            modelBuilder.Entity("SC.API.CleanArchitecture.Domain.Entities.Party", b =>
                {
                    b.HasOne("SC.API.CleanArchitecture.Domain.Entities.IdentificationSchema", "ExternalIdidentificationSchema")
                        .WithMany("Parties")
                        .HasForeignKey("ExternalIdIdentificationSchemaId")
                        .HasConstraintName("FK_Party_IdentificationSchema");

                    b.Navigation("ExternalIdidentificationSchema");
                });

            modelBuilder.Entity("SC.API.CleanArchitecture.Domain.Entities.PartyRole", b =>
                {
                    b.HasOne("SC.API.CleanArchitecture.Domain.Entities.Party", "Party")
                        .WithMany("PartyRoles")
                        .HasForeignKey("PartyId")
                        .HasConstraintName("FK_PartyRole_Party");

                    b.HasOne("SC.API.CleanArchitecture.Domain.Entities.PartyRoleType", "PartyRoleType")
                        .WithMany("PartyRoles")
                        .HasForeignKey("PartyRoleTypeId")
                        .HasConstraintName("FK_PartyRole_PartyRoleType")
                        .IsRequired();

                    b.Navigation("Party");

                    b.Navigation("PartyRoleType");
                });

            modelBuilder.Entity("SC.API.CleanArchitecture.Domain.Entities.PartyRoleAssociation", b =>
                {
                    b.HasOne("SC.API.CleanArchitecture.Domain.Entities.PartyRoleAssociationType", "PartyRoleAssociationType")
                        .WithMany("PartyRoleAssociations")
                        .HasForeignKey("PartyRoleAssociationTypeId")
                        .HasConstraintName("FK_PartyRoleAssociation_PartyRoleAssociationType")
                        .IsRequired();

                    b.HasOne("SC.API.CleanArchitecture.Domain.Entities.PartyRole", "PartyRoleInvolvedWith")
                        .WithMany("PartyRoleAssociationPartyRoleInvolvedWiths")
                        .HasForeignKey("PartyRoleInvolvedWithId")
                        .HasConstraintName("FK_PartyRoleAssociation_PartyRole")
                        .IsRequired();

                    b.HasOne("SC.API.CleanArchitecture.Domain.Entities.PartyRole", "PartyRoleInvolves")
                        .WithMany("PartyRoleAssociationPartyRoleInvolves")
                        .HasForeignKey("PartyRoleInvolvesId")
                        .HasConstraintName("FK_PartyRoleAssociation_PartyRole1")
                        .IsRequired();

                    b.Navigation("PartyRoleAssociationType");

                    b.Navigation("PartyRoleInvolvedWith");

                    b.Navigation("PartyRoleInvolves");
                });

            modelBuilder.Entity("SC.API.CleanArchitecture.Domain.Entities.PartyRoleContactableVia", b =>
                {
                    b.HasOne("SC.API.CleanArchitecture.Domain.Entities.ContactMedium", "ContactMedium")
                        .WithMany("PartyRoleContactableVia")
                        .HasForeignKey("ContactMediumId")
                        .HasConstraintName("FK_PartyRoleContactableVia_ContactMedium")
                        .IsRequired();

                    b.HasOne("SC.API.CleanArchitecture.Domain.Entities.PartyRole", "PartyRole")
                        .WithMany("PartyRoleContactableVia")
                        .HasForeignKey("PartyRoleId")
                        .HasConstraintName("FK_PartyRoleContactableVia_PartyRole")
                        .IsRequired();

                    b.Navigation("ContactMedium");

                    b.Navigation("PartyRole");
                });

            modelBuilder.Entity("SC.API.CleanArchitecture.Domain.Entities.PartyRoleType", b =>
                {
                    b.HasOne("SC.API.CleanArchitecture.Domain.Entities.PartyRoleType", "ParentClass")
                        .WithMany("InverseParentClass")
                        .HasForeignKey("ParentClassId")
                        .HasConstraintName("FK_PartyRoleType_PartyRoleType");

                    b.HasOne("SC.API.CleanArchitecture.Domain.Entities.PartyRoleTypeDiscriminator", "PartyRoleTypeDiscriminator")
                        .WithMany("PartyRoleTypes")
                        .HasForeignKey("PartyRoleTypeDiscriminatorId")
                        .HasConstraintName("FK_PartyRoleType_PartyRoleTypeDiscriminator")
                        .IsRequired();

                    b.Navigation("ParentClass");

                    b.Navigation("PartyRoleTypeDiscriminator");
                });

            modelBuilder.Entity("SC.API.CleanArchitecture.Domain.Entities.Permission", b =>
                {
                    b.HasOne("SC.API.CleanArchitecture.Domain.Entities.PermissionGroup", "PermissionGroup")
                        .WithMany("Permissions")
                        .HasForeignKey("PermissionGroupId")
                        .HasConstraintName("FK_Permission_PermissionGroup");

                    b.HasOne("SC.API.CleanArchitecture.Domain.Entities.PermissionLevel", "PermissionLevel")
                        .WithMany("Permissions")
                        .HasForeignKey("PermissionLevelId")
                        .HasConstraintName("FK_Permission_PermissionLevel")
                        .IsRequired();

                    b.HasOne("SC.API.CleanArchitecture.Domain.Entities.PermissionType", "PermissionType")
                        .WithMany("Permissions")
                        .HasForeignKey("PermissionTypeId")
                        .HasConstraintName("FK_Permission_PermissionType")
                        .IsRequired();

                    b.Navigation("PermissionGroup");

                    b.Navigation("PermissionLevel");

                    b.Navigation("PermissionType");
                });

            modelBuilder.Entity("SC.API.CleanArchitecture.Domain.Entities.PermissionPartyRoleAssociation", b =>
                {
                    b.HasOne("SC.API.CleanArchitecture.Domain.Entities.PartyRoleAssociation", "PartyRoleAssociation")
                        .WithMany("PermissionPartyRoleAssociations")
                        .HasForeignKey("PartyRoleAssociationId")
                        .HasConstraintName("FK_PermissionPartyRoleAssociation_PartyRoleAssociation")
                        .IsRequired();

                    b.HasOne("SC.API.CleanArchitecture.Domain.Entities.Permission", "Permission")
                        .WithMany("PermissionPartyRoleAssociations")
                        .HasForeignKey("PermissionId")
                        .HasConstraintName("FK_PermissionPartyRoleAssociation_Permission")
                        .IsRequired();

                    b.Navigation("PartyRoleAssociation");

                    b.Navigation("Permission");
                });

            modelBuilder.Entity("SC.API.CleanArchitecture.Domain.Entities.PermissionRelationship", b =>
                {
                    b.HasOne("SC.API.CleanArchitecture.Domain.Entities.Permission", "Permission")
                        .WithMany("PermissionRelationshipPermissions")
                        .HasForeignKey("PermissionId")
                        .HasConstraintName("FK_PermissionRelationship_Permission")
                        .IsRequired();

                    b.HasOne("SC.API.CleanArchitecture.Domain.Entities.Permission", "RelatedPermission")
                        .WithMany("PermissionRelationshipRelatedPermissions")
                        .HasForeignKey("RelatedPermissionId")
                        .HasConstraintName("FK_PermissionRelationship_Permission1")
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("RelatedPermission");
                });

            modelBuilder.Entity("SC.API.CleanArchitecture.Domain.Entities.PermissionTemplatePermission", b =>
                {
                    b.HasOne("SC.API.CleanArchitecture.Domain.Entities.Permission", "Permission")
                        .WithMany("PermissionTemplatePermissions")
                        .HasForeignKey("PermissionId")
                        .HasConstraintName("FK_PermissionTemplatePermission_Permission")
                        .IsRequired();

                    b.HasOne("SC.API.CleanArchitecture.Domain.Entities.PermissionTemplate", "PermissionTemplate")
                        .WithMany("PermissionTemplatePermissions")
                        .HasForeignKey("PermissionTemplateId")
                        .HasConstraintName("FK_PermissionTemplatePermission_PermissionTemplate")
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("PermissionTemplate");
                });

            modelBuilder.Entity("SC.API.CleanArchitecture.Domain.Entities.ApplicationRole", b =>
                {
                    b.Navigation("RoleClaims");
                });

            modelBuilder.Entity("SC.API.CleanArchitecture.Domain.Entities.ApplicationUser", b =>
                {
                    b.Navigation("EntityOperationLogs");

                    b.Navigation("EntityProcessLogs");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("SC.API.CleanArchitecture.Domain.Entities.Catalog", b =>
                {
                    b.Navigation("CatalogItems");

                    b.Navigation("Catalogs");
                });

            modelBuilder.Entity("SC.API.CleanArchitecture.Domain.Entities.CatalogItem", b =>
                {
                    b.Navigation("CatalogItems");
                });

            modelBuilder.Entity("SC.API.CleanArchitecture.Domain.Entities.ContactMedium", b =>
                {
                    b.Navigation("PartyRoleContactableVia");
                });

            modelBuilder.Entity("SC.API.CleanArchitecture.Domain.Entities.ContactMediumClass", b =>
                {
                    b.Navigation("ContactMedia");
                });

            modelBuilder.Entity("SC.API.CleanArchitecture.Domain.Entities.Document", b =>
                {
                    b.Navigation("EntityDocuments");
                });

            modelBuilder.Entity("SC.API.CleanArchitecture.Domain.Entities.DocumentExtension", b =>
                {
                    b.Navigation("Documents");

                    b.Navigation("DocumentTemplates");
                });

            modelBuilder.Entity("SC.API.CleanArchitecture.Domain.Entities.DocumentTemplate", b =>
                {
                    b.Navigation("Documents");
                });

            modelBuilder.Entity("SC.API.CleanArchitecture.Domain.Entities.Entity", b =>
                {
                    b.Navigation("EntityDocuments");

                    b.Navigation("EntityInvolvementRoles");

                    b.Navigation("EntityLifeCycleHistoryLogs");

                    b.Navigation("EntityOperationLogs");

                    b.Navigation("EntityProcessLogs");
                });

            modelBuilder.Entity("SC.API.CleanArchitecture.Domain.Entities.EntitySpecInvolvementRoleType", b =>
                {
                    b.Navigation("EntitySpecInvolvRoleTypeUses");
                });

            modelBuilder.Entity("SC.API.CleanArchitecture.Domain.Entities.EntitySpecification", b =>
                {
                    b.Navigation("Entities");

                    b.Navigation("EntitySpecInvolvementRoleTypes");

                    b.Navigation("EntitySpecLifeCycleOperations");
                });

            modelBuilder.Entity("SC.API.CleanArchitecture.Domain.Entities.IdentificationSchema", b =>
                {
                    b.Navigation("Parties");
                });

            modelBuilder.Entity("SC.API.CleanArchitecture.Domain.Entities.Individual", b =>
                {
                    b.Navigation("EntityLifeCycleChangeByParties");

                    b.Navigation("EntityModifiedByParties");

                    b.Navigation("EntityRecordedByParties");
                });

            modelBuilder.Entity("SC.API.CleanArchitecture.Domain.Entities.InvolvementRole", b =>
                {
                    b.Navigation("EntityInvolvementRole");
                });

            modelBuilder.Entity("SC.API.CleanArchitecture.Domain.Entities.InvolvementRoleType", b =>
                {
                    b.Navigation("EntitySpecInvolvementRoleTypes");

                    b.Navigation("InvolvementRoles");

                    b.Navigation("InvolvementRoleTypePartyRoleTypeInvolves");

                    b.Navigation("OperationInvolvementRoleTypes");
                });

            modelBuilder.Entity("SC.API.CleanArchitecture.Domain.Entities.LifeCycle", b =>
                {
                    b.Navigation("Entities");

                    b.Navigation("EntitySpecLifeCycleOperations");

                    b.Navigation("LifeCycleTransitionTableCurrentLifeCycles");

                    b.Navigation("LifeCycleTransitionTableNextLifeCycles");
                });

            modelBuilder.Entity("SC.API.CleanArchitecture.Domain.Entities.LifeCycleClassDefinition", b =>
                {
                    b.Navigation("EntitySpecifications");

                    b.Navigation("LifeCycleClassDefLifeCycleTrans");

                    b.Navigation("LifeCycles");
                });

            modelBuilder.Entity("SC.API.CleanArchitecture.Domain.Entities.LifeCycleStateType", b =>
                {
                    b.Navigation("LifeCycles");
                });

            modelBuilder.Entity("SC.API.CleanArchitecture.Domain.Entities.LifeCycleTransition", b =>
                {
                    b.Navigation("LifeCycleClassDefLifeCycleTrans");

                    b.Navigation("LifeCycleTransitionTables");
                });

            modelBuilder.Entity("SC.API.CleanArchitecture.Domain.Entities.LifeCycleTransitionTable", b =>
                {
                    b.Navigation("EntityLifeCycleHistoryLogs");
                });

            modelBuilder.Entity("SC.API.CleanArchitecture.Domain.Entities.MimeType", b =>
                {
                    b.Navigation("Documents");

                    b.Navigation("DocumentTemplates");
                });

            modelBuilder.Entity("SC.API.CleanArchitecture.Domain.Entities.Operation", b =>
                {
                    b.Navigation("EntityOperationLogs");

                    b.Navigation("EntityProcessLogs");

                    b.Navigation("EntitySpecLifeCycleOperations");

                    b.Navigation("OperationInvolvementRoleTypes");
                });

            modelBuilder.Entity("SC.API.CleanArchitecture.Domain.Entities.Party", b =>
                {
                    b.Navigation("CatalogItems");

                    b.Navigation("Individual");

                    b.Navigation("Organization");

                    b.Navigation("PartyRoles");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("SC.API.CleanArchitecture.Domain.Entities.PartyRole", b =>
                {
                    b.Navigation("EntitySpecInvolvRoleTypeUses");

                    b.Navigation("InvolvementRoles");

                    b.Navigation("PartyRoleAssociationPartyRoleInvolvedWiths");

                    b.Navigation("PartyRoleAssociationPartyRoleInvolves");

                    b.Navigation("PartyRoleContactableVia");
                });

            modelBuilder.Entity("SC.API.CleanArchitecture.Domain.Entities.PartyRoleAssociation", b =>
                {
                    b.Navigation("PermissionPartyRoleAssociations");
                });

            modelBuilder.Entity("SC.API.CleanArchitecture.Domain.Entities.PartyRoleAssociationType", b =>
                {
                    b.Navigation("EntitySpecInvolvRoleTypeUses");

                    b.Navigation("PartyRoleAssociations");
                });

            modelBuilder.Entity("SC.API.CleanArchitecture.Domain.Entities.PartyRoleType", b =>
                {
                    b.Navigation("InverseParentClass");

                    b.Navigation("InvolvementRoleTypePartyRoleTypeInvolves");

                    b.Navigation("PartyRoles");
                });

            modelBuilder.Entity("SC.API.CleanArchitecture.Domain.Entities.PartyRoleTypeDiscriminator", b =>
                {
                    b.Navigation("PartyRoleTypes");
                });

            modelBuilder.Entity("SC.API.CleanArchitecture.Domain.Entities.Permission", b =>
                {
                    b.Navigation("PermissionPartyRoleAssociations");

                    b.Navigation("PermissionRelationshipPermissions");

                    b.Navigation("PermissionRelationshipRelatedPermissions");

                    b.Navigation("PermissionTemplatePermissions");
                });

            modelBuilder.Entity("SC.API.CleanArchitecture.Domain.Entities.PermissionGroup", b =>
                {
                    b.Navigation("Permissions");
                });

            modelBuilder.Entity("SC.API.CleanArchitecture.Domain.Entities.PermissionLevel", b =>
                {
                    b.Navigation("Permissions");
                });

            modelBuilder.Entity("SC.API.CleanArchitecture.Domain.Entities.PermissionTemplate", b =>
                {
                    b.Navigation("PermissionTemplatePermissions");
                });

            modelBuilder.Entity("SC.API.CleanArchitecture.Domain.Entities.PermissionType", b =>
                {
                    b.Navigation("Permissions");
                });
#pragma warning restore 612, 618
        }
    }
}
