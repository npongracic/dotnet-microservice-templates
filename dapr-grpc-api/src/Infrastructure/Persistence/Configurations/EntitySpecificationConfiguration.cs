// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using SC.API.CleanArchitecture.Domain.Entities;
using Microsoft.EntityFrameworkCore.Metadata.Builders;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore;
using System;
using SC.API.CleanArchitecture.Domain.Enums;
using System.Collections.Generic;
using System.Linq;

namespace SC.API.CleanArchitecture.Infrastructure.Persistence.Configurations
{
    public class EntitySpecificationConfiguration : IEntityTypeConfiguration<EntitySpecification>
    {
        public void Configure(EntityTypeBuilder<EntitySpecification> entity)
        {
            entity.ToTable("EntitySpecification");

            entity.HasKey(t => t.Id);

            entity.Property(e => e.Id)
                .HasColumnName("ID")
                .ValueGeneratedNever();

            entity.Property(e => e.LifeCycleClassDefinitionId).HasColumnName("LifeCycleClassDefinitionID");

            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(50);

            entity.Property(t => t.IsSearchable)
                .IsRequired()
                .HasDefaultValue(true);

            entity.HasOne(d => d.LifeCycleClassDefinition)
                .WithMany(p => p.EntitySpecifications)
                .HasForeignKey(d => d.LifeCycleClassDefinitionId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_EntitySpecification_LifeCycleClassDefinition");

            var enumValues = new List<int>((int[])Enum.GetValues(typeof(EntitySpecificationEnum)));

            entity.HasData(enumValues.Select(t => new EntitySpecification()
            {
                Id = t,
                Name = ((EntitySpecificationEnum)t).ToString(),
                LifeCycleClassDefinitionId = GetLifeCycleClassDefinition((EntitySpecificationEnum)t)
            }));
        }

        private int GetLifeCycleClassDefinition(EntitySpecificationEnum entitySpec)
        {
            switch (entitySpec)
            {
                case EntitySpecificationEnum.Ticket:
                    return (int)LifeCycleClassDefinitionEnum.TicketLifeCycle;
                default:
                    throw new InvalidOperationException($"EntitySpecification invalid lifeCycleClassDefinition for ${entitySpec}");
            }
        }
    }
}
